@model Ground_Handlng.DataObjects.Models.Master.BulletinMaster.BulletinTo
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{

}
<link rel="stylesheet" href="~/AdminLTE/dist/css/adminlte.min.css">
<link rel="stylesheet" href="~/AdminLTE/plugins/bootstrap/css/bootstrap.min.css">

<style>
    input.error {
        border-color: #f00 !important;
    }

    small.required {
        color: #f00;
    }
</style>
<section class="content">
    <div class="card">
        <div class="card-body">
            @using (Html.BeginForm(FormMethod.Post, new { @class = "form-horizontal", @id = "validate", @enctype = "multipart/form-data", @role = "form" }))
            {
                @Html.AntiForgeryToken()

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="callout callout-danger error-box-holder" id="general-error" style="display:none">
                    <h4> Please correct the following errors and sumbit again </h4>
                    <ul id="errors" class="error-box"></ul>
                </div>
                <div class="form-group ignoreThisClass hide">
                    <label asp-for="Id" class="control-label col-md-3"></label>
                    <div class="col-sm-7">
                        <input for="Id" class="form-control required" value="@Model.Id" name="id" readonly="readonly" />
                    </div>
                    <span for="Id" class="text-danger"></span>
                </div>
                <div class="form-group ignoreThisClass hide">
                    <label asp-for="CreatedBy" class="control-label col-md-3"></label>
                    <div class="col-sm-7">
                        <input for="CreatedBy" class="form-control required" value="@Model.CreatedBy" name="createdby" readonly="readonly" />
                    </div>
                    <span for="CreatedBy" class="text-danger"></span>
                </div>
                <div class="form-group ignoreThisClass hide">
                    <label asp-for="CreationDate" class="control-label col-md-3"></label>
                    <div class="col-sm-7">
                        <input for="CreationDate" class="form-control required" value="@Model.CreationDate" name="creationdate" readonly="readonly" />
                    </div>
                    <span for="CreationDate" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Name" class="control-label col-md-3"></label>
                    <div class="col-sm-7">
                        <input for="Name" class="form-control required" value="@Model.Name" name="name" />
                    </div>
                    <span for="Name" class="text-danger"></span>
                </div>
                <br />
                <div class="form-group col-md-3">
                    <button type="submit" class="btn btn-success btn-block"> Save </button>
                </div>
            }
        </div>
    </div>
</section>

<script src="~/AdminLTE/plugins/jquery-validation/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script type="text/javascript">
    $(function () {
        $.validator.setDefaults(':hidden, [readonly=readonly]');
        $.validator.setDefaults({
            submitHandler: function () {
                var url = "/MasterData/BulletinTo/Edit";
                $('#general-error').hide();
                $('#errors').empty();
                var formData = new FormData();
                //formData.append('url', $('#url')[0].files[0]);
                var other_data = $('#validate').serializeArray();
                $.each(other_data, function (key, input) {
                    formData.append(input.name, input.value);
                });
                $.ajax({
                    url: '/MasterData/BulletinTo/Edit',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    cache: false,
                    success: function (data) {
                        debugger;
                        if (data.status == "3" || data.status == "4" || data.status == "5") {
                            if (data.status == "3") {
                                swal({
                                    type: 'success',
                                    title: data.message,
                                    showConfirmButton: false,
                                    timer: 3000
                                }).then(() => { window.location = "/MasterData/BulletinTo/Index"; });;
                                $('#modal').modal('hide');
                            }
                            else {
                                swal({
                                    type: 'error',
                                    title: data.message,
                                    showConfirmButton: false,
                                    timer: 3000
                                });
                            }
                        }
                    },
                    error: function (datd) {
                        window.location = "/MasterData/BulletinTo/Index";
                        swal({
                            type: 'error',
                            title: data.message,
                            showConfirmButton: false,
                            timer: 3000
                        });

                    }

                });
            }
        });
        $('#validate').validate({
            ignore: [],
            errorPlacement: function () { },
            invalidHandler: function () {
                setTimeout(function () {
                    $('.nav-tabs a small.required').remove();
                    var validatePane = $('.tab-content.tab-validate .tab-pane:has(input.error)').each(function () {
                        debugger;
                        var id = $(this).attr('id');
                        $('.nav-tabs').find('a[href^="#' + id + '"]').append('<small class="required">***</small>');
                    });
                });
            },
            rules: {
                name: {
                    required: true
                },
                noticenumber: {
                    required: true
                },
                noticeto: {
                    required: true
                },
                subject: {
                    required: true
                },
                type: {
                    required: true
                },
                sentby: {
                    required: true
                },
                remark: {
                    required: true
                },
                expirationdate: {
                    required: true
                },
                url: {
                    required: true,
                    //fileMaxSize : true,
                    //extension: "docx|rtf|doc|pdf",
                },
            },
            messages: {
                name: {
                    required: "Please enter a Name"
                },
                noticenumber: {
                    required: "Please provide a Notice Number",
                },
                noticeto: {
                    required: "Please enter a Notice To"
                },
                subject: {
                    required: "Please provide a Subject",
                },
                type: {
                    required: "Please enter a Type"
                },
                sentby: {
                    required: "Please provide a Sent By",
                },
                remark: {
                    required: "Please enter a Remark"
                },
                expirationdate: {
                    required: "Please provide a Expiry Date",
                },
                url: {
                    required: "Please provide a PDF",
                    //extension: "Please upload valid file formats"
                },
            },
            errorElement: 'span',
            errorPlacement: function (error, element) {
                error.addClass('invalid-feedback');
                element.closest('.form-group').append(error);
            },
            highlight: function (element, errorClass, validClass) {
                $(element).addClass('is-invalid');
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass('is-invalid');
            }

        });

        //$("#url").on("change", function (e) {
        //    var filename = this.value;
        //    var files = this.files;
        //    var URL = window.URL || window.webkitURL;
        //    var url = URL.createObjectURL(files[0]);
        //    $(this).closest('.row').find('.preview').attr("href", url).show();
        //    $(this).next('.check').prop("disabled", true);
        //    var myfile = $(this).val();
        //    var ext = myfile.split('.').pop();
        //    if (ext == "pdf" || ext == "jpeg" || ext == "jpg") {
        //        $(this).next('.check').val(filename);
        //    } else {
        //        $(this).closest('.row').find('.preview').hide()
        //        alert('Invalid File Type');
        //        $(this).next('.check').val('');
        //        e.preventDefault();
        //        $('#url').val('');
        //    }
        //    if (e.currentTarget.files[0].size >= 1024 * 1024 * 30) {//30000000
        //        alert('File Size cannot be more than 30 MB');
        //        e.preventDefault();
        //        $(this).closest('.row').find('.preview').hide();
        //        $('#url').val('');
        //    }
        //});

    });
</script>